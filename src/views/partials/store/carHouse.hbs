<div class="container-car-home">
    <table id="table-car-home" border="1" class="table-container-car">
        <thead>
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Cant.</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <br>
    <button class="btn-container-cart" id="btn-total-home" onclick="buy_my_car(this)">Buy $0<i class="fi-icon fi-sr-shopping-cart"></i></button>
</div>

<!--this script is for add a fish to the car-->
<script>
    //get the table for his id
    const tabla = document.getElementById("table-car-home");
    function addFish(product,price){
        // get the body of the table
        var bodyTable = tabla.getElementsByTagName("tbody")[0];
        console.log(bodyTable)
        if(!this_product_exists_in_the_cart(bodyTable,product)){
            add_new_product_to_the_car(bodyTable,product,price);
        }

        //show a message of that we add the product to the car
        notificationMessage(product+' add','The product was add with success');
        update_total();
    }

    function add_new_product_to_the_car(bodyTable,product,price){
        // create the new row
        var newRow = bodyTable.insertRow();

        // create the new data of the row
        var cell1 = newRow.insertCell(0);
        var cell2 = newRow.insertCell(1);
        var cell3 = newRow.insertCell(2);
        var cell4 = newRow.insertCell(3);
        var cell5=newRow.insertCell(4);

        // add data to the new row
        cell1.innerHTML = `<td class="dish">${product}</td>`;

        cell2.innerHTML = `<td class="price">${price}</td>`;
        cell2.className = 'price';

        cell3.innerHTML = `<button class="btn-car" onclick="edit_car(this)">1</button>`;

        cell4.innerHTML = `<td class="total">${price}</td>`;
        cell4.className = 'total';

        cell5.innerHTML = `<button class="btn-car" onclick="delate_fish_car(this)"><i class="fi-icon-delate fi-sr-trash"></i></button>`;
    }

    function this_product_exists_in_the_cart(bodyTable,newProduct){
        // get all the row of body of the tabla
        var rows = bodyTable.getElementsByTagName("tr");
        // read all the row
        for (var i = 0; i < rows.length; i++) {
            // get the cell 0, 2 y 3 of the row
            var dataRow=get_data_row(rows[i]);
            var productCell = dataRow[0];
            var priceCell = dataRow[1];
            var cantCell = dataRow[2];
            var totalCell = dataRow[3];

            // get the text of the cell
            var productText = productCell.textContent.trim(); // delate space on white
            var priceText = priceCell.textContent.trim();
            var cantText = cantCell.textContent.trim();
            var totalText = totalCell.textContent.trim();

            if(newProduct==productText){
                update_data_in_car(priceText,cantText,cantCell,totalCell);
                return true;
            }
        }

        return false;
    }

    function get_data_row(row){
        var productCell = row.getElementsByTagName("td")[0];
        var priceCell = row.getElementsByTagName("td")[1];
        var cantCell = row.getElementsByTagName("td")[2];
        var totalCell = row.getElementsByTagName("td")[3];

        return [productCell,priceCell,cantCell,totalCell];
    }

    function update_data_in_car(priceText,cantText,cantCell,totalCell) {
        var price=parseFloat(priceText, 10);
        var cant = parseFloat(cantText, 10) + 1;
        var total = cant * price;

        // update the data of the car  
        cantCell.innerHTML = `<button class="btn-car" onclick="edit_car(this)">${cant}</button>`;
        totalCell.innerHTML = `<td class="total">${total}</td>`;    
    }

    function update_total(){
        var bodyTable = tabla.getElementsByTagName("tbody")[0];

        // get all the row of body of the tabla
        var rows = bodyTable.getElementsByTagName("tr");
        var btn = document.getElementById("btn-total-home");

        var total=0;
        // read all the row
        for (var i = 0; i < rows.length; i++) {
            // get the cell 0, 2 y 3 of the row
            var dataRow=get_data_row(rows[i]);
            var productCell = dataRow[0];
            var priceCell = dataRow[1];
            var cantCell = dataRow[2];
            var totalCell = dataRow[3];

            // get the text of the cell
            var productText = productCell.textContent.trim(); // delate space on white
            var priceText = priceCell.textContent.trim();
            var cantText = cantCell.textContent.trim();
            var totalText = totalCell.textContent.trim();
            total+=parseFloat(totalText, 10);
        }
        btn.textContent ="Buy $"+total;
    }
</script>

<!--this script is for edit or delate the car-->
<script>
    function upload_cant_total(button){
        // Obtener la fila (tr) padre del botón
        var row = button.parentNode.parentNode;
        console.log(row)
        // Obtener el elemento con clase "text-price" dentro de la fila
        var textPriceElement = row.querySelector('.price');
        
        // Obtener el elemento con clase "text-total" dentro de la fila
        var textTotalElement = row.querySelector('.total');
        
        // Obtener y mostrar el valor actual
        var currentCantValue = button.innerText;
        var currentPriceValue = textPriceElement.innerText;
        
        // Actualizar el valor en la página si el usuario ingresó un nuevo valor
        textTotalElement.innerText = parseFloat(currentCantValue) * parseFloat(currentPriceValue);
        update_total();
    }

    async function delate_fish_car(button){
        if(await questionMessage('Delate fish','Are you sure you want to remove this dish from the cart?')){
            var row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);
            update_total();
            notificationMessage('Delate Fish','The fish was delate')
        }
    }

    async function edit_car(button){
        //get old value
        var oldValue = button.innerText;

        //get the new value that the user need 
        var newValue=parseFloat(await edit_cant_car('Edit Cant.',oldValue))
        if (removal_amount(newValue)){
            button.innerText = newValue; //upload the cant
            upload_cant_total(button)
        }
        else{
            delate_fish_car(button)
        }
    }

    function removal_amount(newValue){
        return (newValue  !='') && (newValue>0)
    }
</script>

<script>
    function delate_all_car(){
        delate_all_fish()
        confirmationMessage('Thanks for his buy ❤️','This is the change')
    }

    function delate_all_fish(){
        var bodyTable = tabla.getElementsByTagName("tbody")[0];

        // get all the row of body of the tabla
        var rows = bodyTable.getElementsByTagName("tr");
        var btn = document.getElementById("btn-total-home");

        console.log('yes')
        // read all the row
        for (var i = 0; i < rows.length; i++) {
            // get the cell 3 of the row
            var dataRow=get_data_row(rows[i]);
            var btnCell = dataRow[3];

            //get the row
            var row = btnCell.parentNode.parentNode;
            //row.parentNode.removeChild(row); //delate row 
        }
        tabla.removeChild(bodyTable);
        console.log('yes')
        //this is for that when we will delete the data of the table, add the new tbody for that not have a error  
        const tbody = document.createElement("tbody");
        tabla.appendChild(tbody);

        //update the total
        var total=0;
        btn.textContent ="Buy $"+total;
    }

    //const myCountry=getLocation()
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;

                // You can use geolocation services, such as Google Maps API,
                // to get detailed information about the location.

                // In this example, only latitude and longitude are printed.
                console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);

                // You can use geocoding services to get detailed information about the country.
                // In this simple example, it is assumed that if the latitude is greater than 23.6345
                // (approximately the latitude of Mexico), then the user is in Mexico; otherwise, they are in the USA.
                return determineLocation(latitude, longitude);
            }, function(error) {
                console.error('Error getting location:', error.message);
            });
        } else {
            console.error('Geolocation is not supported in this browser.');
        }

        return 'MXN'
    }

    function determineLocation(latitude, longitude) {
        // You can use geocoding services here to get detailed information.
        // In this simple example, it is assumed that if the latitude is greater than 23.6345
        // (approximately the latitude of Mexico), then the user is in Mexico; otherwise, they are in the USA.
        if (latitude > 23.6345) {
            return 'MXN'
        } else {
            return 'USA'
        }
    }

    async function buy_my_car(button){
        var value = get_value_car(button)
        if(value>0){
            var dataBuy=await show_message_buy_car('Total to pay','Client',value,getLocation());
            if(dataBuy){
                delate_all_car()
            }
        }
    }

    function get_value_car(button){
        var buttonText = button.textContent || button.innerText;
        var numericValue = buttonText.match(/\d+/);
        if (numericValue) {
            var value = parseInt(numericValue[0], 10);
            return value;
        } else {
            return 0;
        } 
    }
</script>